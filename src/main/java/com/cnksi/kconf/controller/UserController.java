package com.cnksi.kconf.controller;

import java.util.HashMap;
import java.util.List;
import java.util.UUID;

import com.cnksi.kconf.controller.vo.UserQuery;
import com.cnksi.kconf.model.Department;
import com.cnksi.kconf.model.Role;
import com.cnksi.kconf.model.User;
import com.cnksi.kconf.model.UserRole;
import com.cnksi.kcore.jfinal.model.KModel;
import com.cnksi.kcore.utils.ApiJson;
import com.cnksi.kcore.utils.KStrKit;
import com.jfinal.core.Controller;
import com.jfinal.core.Injector;
import com.jfinal.kit.JsonKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by JFinal.
 */
public class UserController extends Controller {
	private static final String tabId = "user-list";

	public void index() {
		// TODO 改为登录人员部门
		List<Record> record = Department.me.selectChidrenByParentId("1");
		if (record != null && record.size() > 0)
			record.get(0).set("open", true);
		setAttr("ztreedata", JsonKit.toJson(record));
		render("user_index.jsp");
	}

	public void user() {
		KModel m = KModel.me.findByTableName("k_user");
		if (m != null) {
			setAttr("model", m);
			setAttr("fields", m.getField());
		}

		UserQuery queryParam = Injector.injectBean(UserQuery.class, null, getRequest(), false);
		Page<User> page = User.me.paginate(queryParam);
		page.getList().forEach(x -> x.put("_userRole",UserRole.me.findByUserId("uid", x.get("uid").toString())));
		setAttr("page", page);
		setAttr("query", queryParam);
		setAttr("dept", Department.me.findById(queryParam.getDeptid()));
		setAttr("roles", Role.me.findAll());
		keepPara();
		render("user.jsp");
	}

	public void edit() {
		KModel m = KModel.me.findByTableName("k_user");
		if (m != null) {
			setAttr("model", m);
			setAttr("fields", m.getField());
		}
		String idValue = getPara("id", null);

		User record = null;
		if (idValue != null) {
			record = User.me.findById(idValue);
		} else {
			record = new User();
		}

		setAttr("record", record);
		render("user_form.jsp");
	}

	public void save() {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		String role_id = getPara("role_id"); // 用户角色id
		User record = getModel(User.class, "record");
		if (record.get("uid") != null) {
			record.update();
			resultMap.put("statusCode", "200");
			resultMap.put("message", "更新成功");
			resultMap.put("closeCurrent", true);
			resultMap.put("tabid", "user-list");
		} else {
			record.set("upwd", KStrKit.Encrypt("0000aaaa"));
			record.save();
			resultMap.put("statusCode", "200");
			resultMap.put("message", "保存成功");
			resultMap.put("closeCurrent", true);
			resultMap.put("tabid", "user-list");
		}

		// 设置用户的角色
		UserRole userRole = UserRole.me.findByUserId("uid", record.get("uid").toString());
		if (userRole != null) {
			userRole.set("rid", role_id);

			userRole.update();
		} else {
			userRole = new UserRole();
			userRole.set(userRole.getPkName(), UUID.randomUUID().toString());
			userRole.set("rid", role_id);
			userRole.set("uid", record.get("uid"));

			userRole.save();
		}

		renderJson(resultMap);
	}

	public void delete() {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		User record = User.me.findById(getPara("uid"));
		if (record != null) {
			record.set("enabled", 1).update();
			resultMap.put("statusCode", "200");
			resultMap.put("message", "删除成功");
			resultMap.put("tabid", "");
			resultMap.put("forward", "");
			resultMap.put("forwardConfirm", "");
			resultMap.put("closeCurrent", false);
			renderJson(resultMap);
		} else {
			resultMap.put("statusCode", "300");
			resultMap.put("message", "删除失败");
			resultMap.put("closeCurrent", false);
			resultMap.put("tabid", "");

			renderJson(resultMap);
		}

	}

	/**
	 * 重置密码
	 */
	public void resetPwd() {
		User record = new User();
		record.setPkVal(getPara());
		record.set("upwd", KStrKit.Encrypt("0000aaaa"));
		if (record.update()) {
			renderJson(ApiJson.success(false, tabId, ""));
		} else {
			renderJson(ApiJson.error(false, tabId, ""));
		}
	}

	/**
	 * 修改密码
	 */
	public void changePwd() {

		User record = getModel(User.class, "record");

		if (record.update()) {
			renderJson(ApiJson.success(false, tabId, ""));
		} else {
			renderJson(ApiJson.error(false, tabId, ""));
		}
	}

}
