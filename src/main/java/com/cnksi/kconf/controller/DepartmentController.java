package com.cnksi.kconf.controller;

import java.util.HashMap;
import java.util.List;

import com.cnksi.kconf.controller.vo.DepartmentQuery;
import com.cnksi.kconf.model.Department;
import com.cnksi.kcore.jfinal.model.KModel;
import com.cnksi.kcore.jfinal.model.KModelField;
import com.jfinal.core.Controller;
import com.jfinal.core.Injector;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by JFinal.
 */
public class DepartmentController extends Controller {
	public void index() {
		KModel m = KModel.me.findByTableName("k_department");
		if (m != null) {
			setAttr("model", m);
			setAttr("fields", m.getField());
		}
		DepartmentQuery queryParam = Injector.injectBean(DepartmentQuery.class, null, getRequest(), false);

		setAttr("page", Department.me.paginate(queryParam));
		setAttr("query", queryParam);
		render("department.jsp");
	}

	public void edit() {
		/*
		 * 1、获取表相关配置，并且将配置数据返回到页面: model, fields<br/> 2、field中含有settings作为字段配置项,包含:lookup, viewType等配置@return 3、Map<String,ConfModelField> key为字段名，可通过字段名快速获取字段配置信息
		 */
		
		KModel m = KModel.me.findByTableName(Department.me.getTableName());
		if (m != null) {
			setAttr("model", m);
			List<KModelField> fields = m.getField();
			fields.forEach(f -> f.set("settings", f.getSettings()));
			setAttr("fields", fields);
		}

		String idValue = getPara("dept_id", null);
		String pid = getPara("parent_id");
		Department department = null;
		if (StrKit.notBlank(idValue)) {
			department = Department.me.findById(idValue);
		} else {
			department = new Department();
			department.set("pid", pid);
		}
		setAttr("record", department);

		render("department_form.jsp");
	}

	public void save() {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		Department record = getModel(Department.class, "record");
		if (record.get("did") != "" && record.get("did") != null) {
			record.update();
			resultMap.put("statusCode", "200");
			resultMap.put("message", "更新成功");

			resultMap.put("closeCurrent", true);
			resultMap.put("tabid", "user-list");
		} else {
			record.save();
			resultMap.put("did", record.get("did"));
			resultMap.put("statusCode", "200");
			resultMap.put("message", "保存成功");
			resultMap.put("closeCurrent", true);
			resultMap.put("tabid", "user-list");
		}

		renderJson(resultMap);
	}

	public void delete() {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		Department record = Department.me.findById(getPara("dept_id"));
		if (record != null) {
			record.set("enabled", 1).update();
			resultMap.put("statusCode", "200");
			resultMap.put("message", "删除成功");
			resultMap.put("closeCurrent", false);
			resultMap.put("pid", record.get("pid"));
			renderJson(resultMap);
		} else {
			resultMap.put("statusCode", "300");
			resultMap.put("message", "删除失败");
			resultMap.put("closeCurrent", false);
			resultMap.put("tabid", "");
			renderJson(resultMap);
		}

	}

	public void json() {
		List<Record> departments = Department.me.findAllDeptTree();
		if (departments != null && departments.size() > 0)
			departments.get(0).set("open", true);
		renderJson(departments);
	}

}
